// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: replica/proto/replica.proto

package replica

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReplicaProto_Send_FullMethodName = "/replica.ReplicaProto/Send"
)

// ReplicaProtoClient is the client API for ReplicaProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicaProtoClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (ReplicaProto_SendClient, error)
}

type replicaProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicaProtoClient(cc grpc.ClientConnInterface) ReplicaProtoClient {
	return &replicaProtoClient{cc}
}

func (c *replicaProtoClient) Send(ctx context.Context, opts ...grpc.CallOption) (ReplicaProto_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplicaProto_ServiceDesc.Streams[0], ReplicaProto_Send_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replicaProtoSendClient{stream}
	return x, nil
}

type ReplicaProto_SendClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type replicaProtoSendClient struct {
	grpc.ClientStream
}

func (x *replicaProtoSendClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicaProtoSendClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplicaProtoServer is the server API for ReplicaProto service.
// All implementations must embed UnimplementedReplicaProtoServer
// for forward compatibility
type ReplicaProtoServer interface {
	Send(ReplicaProto_SendServer) error
	mustEmbedUnimplementedReplicaProtoServer()
}

// UnimplementedReplicaProtoServer must be embedded to have forward compatible implementations.
type UnimplementedReplicaProtoServer struct {
}

func (UnimplementedReplicaProtoServer) Send(ReplicaProto_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedReplicaProtoServer) mustEmbedUnimplementedReplicaProtoServer() {}

// UnsafeReplicaProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicaProtoServer will
// result in compilation errors.
type UnsafeReplicaProtoServer interface {
	mustEmbedUnimplementedReplicaProtoServer()
}

func RegisterReplicaProtoServer(s grpc.ServiceRegistrar, srv ReplicaProtoServer) {
	s.RegisterService(&ReplicaProto_ServiceDesc, srv)
}

func _ReplicaProto_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicaProtoServer).Send(&replicaProtoSendServer{stream})
}

type ReplicaProto_SendServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type replicaProtoSendServer struct {
	grpc.ServerStream
}

func (x *replicaProtoSendServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicaProtoSendServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplicaProto_ServiceDesc is the grpc.ServiceDesc for ReplicaProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicaProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replica.ReplicaProto",
	HandlerType: (*ReplicaProtoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _ReplicaProto_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "replica/proto/replica.proto",
}
